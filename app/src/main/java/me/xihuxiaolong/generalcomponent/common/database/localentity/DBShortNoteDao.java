package me.xihuxiaolong.generalcomponent.common.database.localentity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBSHORT_NOTE".
*/
public class DBShortNoteDao extends AbstractDao<DBShortNote, Long> {

    public static final String TABLENAME = "DBSHORT_NOTE";

    /**
     * Properties of entity DBShortNote.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
        public final static Property CreatedTime = new Property(2, long.class, "createdTime", false, "CREATED_TIME");
        public final static Property ModifiedTime = new Property(3, long.class, "modifiedTime", false, "MODIFIED_TIME");
    };


    public DBShortNoteDao(DaoConfig config) {
        super(config);
    }
    
    public DBShortNoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBSHORT_NOTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TEXT\" TEXT," + // 1: text
                "\"CREATED_TIME\" INTEGER NOT NULL ," + // 2: createdTime
                "\"MODIFIED_TIME\" INTEGER NOT NULL );"); // 3: modifiedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBSHORT_NOTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBShortNote entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(2, text);
        }
        stmt.bindLong(3, entity.getCreatedTime());
        stmt.bindLong(4, entity.getModifiedTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBShortNote entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(2, text);
        }
        stmt.bindLong(3, entity.getCreatedTime());
        stmt.bindLong(4, entity.getModifiedTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBShortNote readEntity(Cursor cursor, int offset) {
        DBShortNote entity = new DBShortNote( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // text
            cursor.getLong(offset + 2), // createdTime
            cursor.getLong(offset + 3) // modifiedTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBShortNote entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreatedTime(cursor.getLong(offset + 2));
        entity.setModifiedTime(cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBShortNote entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBShortNote entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
